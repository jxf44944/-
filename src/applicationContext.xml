<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd 
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">


	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url"
			value="jdbc:mysql://localhost:3306/JuXiaoFei?useUnicode=true&amp;characterEncoding=UTF-8" />
		<property name="username" value="root" />
		<property name="password" value="root" />
		<!-- 连接池启动时的初始值 -->
		<property name="initialSize" value="2" />
		<!-- 连接池的最大值 -->
		<property name="maxActive" value="100" />
		<!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
		<property name="maxIdle" value="2" />
		<!--  最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
		<property name="minIdle" value="1" />
	</bean>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mappingResources">
			<list>
				<value>com/entity/TUser.hbm.xml</value>
				<value>com/entity/TLimit.hbm.xml</value>
				<value>com/entity/TActer.hbm.xml</value>
				<value>com/entity/TMiddle.hbm.xml</value>
				<value>com/entity/TMedicine.hbm.xml</value>
				<value>com/entity/TMedicinefatory.hbm.xml</value>
				<value>com/entity/TProducter.hbm.xml</value>
				<value>com/entity/THospital.hbm.xml</value>
				<value>com/entity/TMedicinetype.hbm.xml</value>
				<value>com/entity/TMedpromiddle.hbm.xml</value>
				<value>com/entity/TAllorder.hbm.xml</value>
				<value>com/entity/TAllorderdetail.hbm.xml</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<value>
				hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
				hibernate.hbm2ddl.auto=update
				hibernate.format_sql=false
             </value>
		</property>
	</bean>
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>


	<!-- 事务管理器 -->
	<bean id="txManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

<!--
事务传播行为种类
Spring在TransactionDefinition接口中规定了7种类型的事务传播行为，它们规定了事务方法和事务方法发生嵌套调用时事务如何进行传播：
事务传播行为类型

说明

PROPAGATION_REQUIRED
	

如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择。

PROPAGATION_SUPPORTS
	

支持当前事务，如果当前没有事务，就以非事务方式执行。

PROPAGATION_MANDATORY
	

使用当前的事务，如果当前没有事务，就抛出异常。

PROPAGATION_REQUIRES_NEW
	

新建事务，如果当前存在事务，把当前事务挂起。

PROPAGATION_NOT_SUPPORTED
	

以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。

PROPAGATION_NEVER
	

以非事务方式执行，如果当前存在事务，则抛出异常。

PROPAGATION_NESTED
	

如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。
-->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="ins*" propagation="REQUIRED" />
			<tx:method name="upt*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>

    <!-- 
   （* com.evan.crm.service.*.*（..））中几个通配符的含义： 
|第一个 * —— 通配 随便率性返回值类型| 
|第二个 * —— 通配包com.evan.crm.service下的随便率性class| 
|第三个 * —— 通配包com.evan.crm.service下的随便率性class的随便率性办法| 
|第四个 .. —— 通配 办法可以有0个或多个参数| 

    1、Adivisor是一种特殊的Aspect，Advisor代表spring中的Aspect
    2、区别：advisor只持有一个Pointcut和一个advice，而aspect可以多个pointcut和多个advice
     -->
    
	<aop:config>
		<aop:pointcut id="serviceMethods"
			expression="execution(* com.service.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods" />
	</aop:config>

	<context:component-scan base-package="com"></context:component-scan>
</beans>